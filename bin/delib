#!/usr/bin/env node
'use strict';
const program = require('commander');
const path = require('path');
const fs = require('fs-extra');
const pathExists = require('path-exists').sync;
const spawn = require('child_process').spawn;
const spawnSync = require('child_process').spawnSync;

const delib = require('./../index.js');
const Contracts = require('./../src/models/Contracts.js');
const config = require('./../src/config/config.js');

/** Formats the options to include options and account index */
function optionsFormat(options, configOptions) {
  if (options.value) options.value = delib.eth.toWei(options.value);
  const newObject = Object.assign(configOptions, options);
  const index = newObject.from;
  delib.eth.accountIndex = index;
  return newObject;
}

program
  .version('2.0.0');

/**
 * Initializes DeLib by creating a configuration file and the contracts folder.
 */
program
  .command('init')
  .description('Create configuration file, genesis file, and necessary folders')
  .action(() => {
    const configPath = path.join(process.cwd(), 'delib.js');
    const genesisPath = path.join(process.cwd(), 'devgenesis.json');
    const contractsFolderPath = path.join(process.cwd(), 'contracts');
    const builtFolderPath = path.join(process.cwd(), 'built');
    const addressFolderPath = path.join(process.cwd(), 'addresses');
    const devChainFolderPath = path.join(process.cwd(), 'devchain');

    // const genesisPath = path.join(process.cwd(), 'devgenesis.json')
    if (!pathExists(configPath)) {
      const defaultConfig = fs.readFileSync(path.join(__dirname, '/../src/config/default.js'));
      fs.writeFileSync(configPath, defaultConfig);
      console.log('Created config file delib.js');
    } else {
      console.log('DeLib config already initalized');
    }

    if (!pathExists(genesisPath)) {
      const genesisFile = fs.readFileSync(path.join(__dirname, '/../src/devchain/devgenesis.json'));
      fs.writeFileSync(genesisPath, genesisFile);
      console.log('Created genesis file devgenesis.json');
    }

    if (!pathExists(contractsFolderPath)) {
      fs.mkdirSync(contractsFolderPath);
      console.log('Created contract folder');
    }

    if (!pathExists(builtFolderPath)) {
      fs.mkdirSync(builtFolderPath);
      console.log('Created built contracts folder');
    }

    if (!pathExists(addressFolderPath)) {
      fs.mkdirSync(addressFolderPath);
      console.log('Created contract addresses folder');
    }

    if (!pathExists(devChainFolderPath)) {
      fs.mkdirSync(devChainFolderPath);
      console.log('Created devchain folder');
    }

  });

/**
 * Build a Solidity contract from paths in delib configuration file. Default is './contracts/'
 */
program
  .command('build <file>')
  .description('Build a solidity contract')
  .action((file) => {
    delib.eth.init();
    delib.eth.buildContracts(file)
      .then((contracts) => {

      })
      .catch(err => {
        console.log(err);
      });
  });

/**
 * Deploy a Solidity contract from paths in delib configuration file. Default is './contracts/'.
 */
program
  .command('deploy <contractName> [args...]')
  .description('Deploy a built contract')
  .option('--built <path>', 'Path to built contracts folder')
  .option('--address <path>', 'Path to addresses folder')
  .option('-f --from <index>', 'From transaction option. Takes in the account index')
  .option('-t --to <address>', 'To transaction option. Takes in the actual account address')
  .option('-v --value <ether>', 'Value transaction option. Converts the value from Ether to wei')
  .option('-g --gas <number>', 'Gas transaction option')
  .option('-p --gasPrice <number>', 'Gas price transaction option')
  .option('-n --nonce <number>', 'Nonce transaction option')
  .action((contractName, args, options) => {
    delib.eth.init();
    options = optionsFormat(options, config.cli.options);
    delib.eth.contractOptions.built = options.built || delib.eth.contractOptions.built;
    config.contracts.address = options.address || config.contracts.address;
    delib.eth.deploy(contractName, args, options)
      .then(instance => {
        console.log('Deployed address:', instance.address);
      })
      .catch(err => {
        console.error(err);
      });
  });

/**
 * Set the address of a particular contract when called with exec.
 */
program
  .command('set <contractName> <contractAddress>')
  .option('--address <path>', 'Path to addresses folder')
  .description('Bind a built contract to an address to call methods with exec')
  .action((contractName, contractAddress, options) => {
    config.contracts.address = options.address || config.contracts.address;
    Contracts.set(contractName, contractAddress);
  });

/**
 * Executes a deployed contract with specified method and provided arguments.
 */
program
  .command('exec <contractName> <method> [args...]')
  .description('Call or make a transaction with a contract method')
  .option('--built <path>', 'Path to built contracts folder')
  .option('--address <path>', 'Path to addresses folder')
  .option('-f --from <index>', 'From transaction option. The account index')
  .option('-t --to <address>', 'To transaction option. The actual account address')
  .option('-v --value <ether>', 'Value transaction option. Converts it from Ether to wei')
  .option('-g --gas <number>', 'Gas transaction option')
  .option('-p --gasPrice <number>', 'Gas price transaction option')
  .option('-n --nonce <number>', 'Nonce transaction option')
  .action((contractName, method, args, options) => {
    delib.eth.init();
    delib.eth.contractOptions.built = options.built || delib.eth.contractOptions.built;
    config.contracts.address = options.address || config.contracts.address;
    const contractAddress = Contracts.get(contractName);
    options = optionsFormat(options, config.cli.options);
    const contract = delib.eth.execAt(contractName, contractAddress, options);
    contract[method].apply(this, args)
      .then(txRes => {
        console.log('Transaction response:', txRes);
      })
      .catch(err => {
        console.error(err);
      });
  });

/**
 * Show the logs of a contract event.
 */
program
  .command('events <contractName> <eventName> [fromBlock]')
  .description('Show the logs of an event')
  .action((contractName, eventName, fromBlock) => {
    delib.eth.init();
    delib.eth.events(contractName, eventName, fromBlock)
      .then(logs => {
        console.log('Event logs:');
        console.log(logs);
      })
      .catch(err => {
        console.error(err);
      });
  });

/**
 * Get the balance of a particular Ethereum account based on account index.
 */
program
  .command('balance <index>')
  .description('Get the balance of an Ethereum account by its index')
  .action((index) => {
    delib.eth.init();
    const balance = delib.eth.getBalanceEther(index);
    console.log(balance);
  });

/**
 * Create a new Ethereum account.
 */
program
  .command('create <password>')
  .description('Create an Ethereum account')
  .action(password => {
    delib.eth.init();
    delib.eth.initIPC();
    delib.eth.createAccount(password)
      .then(res => {
        console.log(res);
        delib.eth.closeIPC();
      })
      .catch(err => {
        console.error(err);
        delib.eth.closeIPC();
      });
  });

/**
 * Unlocks an Ethereum account.
 */
program
  .command('unlock <index> <password> [time]')
  .description('Unlock an Ethereum account')
  .action((index, password, time) => {
    delib.eth.init();
    delib.eth.initIPC();
    time = time || 60 * 60 * 24;
    delib.eth.unlockAccount(index, password, time)
      .then(bool => {
        delib.eth.closeIPC();
      })
      .catch(err => {
        console.error(err);
        delib.eth.closeIPC();
      });
  });

program
  .command('devchain')
  .description('Start up a node for a dev blockchain. Creates devgenesis.json if it\'s not available')
  .option('-r --reset', 'Reset the blockchain data directory')
  .option('--off', 'Turn off automatic mining.')
  .option('--accounts <amount>', 'Number of accounts to create if creating the blockchain or reseting')
  .option('--password <value>', 'Password to give and unlock the accounts automatically created')
  .option('--identity <value>', 'Geth node identity name. Default is "delib".')
  .option('--datadir <path>', 'Relative path to blockchain data. Creates the folder if it\'s not there. Default is your projects devchain folder file or where this command is run')
  .option('--port <number>', 'Geth server network p2p port. Default is 30303')
  .option('--rpchost <value>', 'Geth server HTTP-RPC host. Default is localhost')
  .option('--rpcport <number>', 'Geth server HTTP-RPC port. Default is 8545')
  .option('--verbosity <number>', 'Logging verbosity: 0=silent, 1=error, 2=warn, 3=info, 4=core, 5=debug, 6=detail. Default is 3')
  .option('--rpccorsdomain <value>', 'Comma separated list of domains from which to accept cross origin requests. Default is *')
  .action(options => {
    // Set custom geth options based on options
    config.blockchain.autoMine = (!options.off) ? true : false;
    config.blockchain.path.dev = options.datadir ? path.join(process.cwd(), options.datadir) : config.blockchain.path.dev;
    config.blockchain.accountAmount = options.accounts || config.blockchain.accountAmount;
    config.blockchain.password = options.password || config.blockchain.password;

    // Check to see if a reset is needed
    if (pathExists(config.blockchain.path.dev) && options.reset) {
      fs.removeSync(config.blockchain.path.dev);
      gethInit();
    } else if (!pathExists(path.join(config.blockchain.path.dev, 'chaindata'))) {
      options.reset = true;
      gethInit();
    } else {
      gethStart();
    }

    function gethInit() {
      config.blockchain.reset = true;

      // Looks for the genesis file in project root folder, where command was called, or one directory above the blockchain data if --datadir is specified.
      let genesisPath = options.datadir ?  path.join(process.cwd(), options.datadir, '..', 'devgenesis.json') : path.join(config.projectRoot, 'devgenesis.json');

      // Only reset or create blockchain folder if there's a genesis file avaliable
      if (pathExists(genesisPath)) {
        const initArgs = [
          '--datadir', config.blockchain.path.dev,
          'init', genesisPath
        ];
        spawnSync('geth', initArgs, { stdio: 'inherit' });
        gethStart();
      } else {
        const genesisFile = fs.readFileSync(path.join(__dirname, '/../src/devchain/devgenesis.json'));
        fs.writeFileSync(genesisPath, genesisFile);
        console.log('Created devchain genesis file at', genesisPath);
        console.log('Call commmand again to start the blockchain using the genesis file');
      }
    }

    function gethStart() {
      // Add the config object to the preload script
      const configString = 'var CONFIG = ' + JSON.stringify(config.blockchain, 2) + '; \n';
      const preloadFile = fs.readFileSync(path.join(__dirname, './../src/devchain/preload.js'));
      const pathToBuiltPreload = path.join(__dirname, './../src/devchain/devchain.js');
      fs.writeFileSync(pathToBuiltPreload, configString);
      fs.appendFileSync(pathToBuiltPreload, preloadFile);

      // Add the static-nodes.json file to chain folder if the config file contains enodes
      if (config.blockchain.staticNodes.length > 0) {
        const staticNodesString = JSON.stringify(config.blockchain.staticNodes);
        fs.writeFileSync(path.join(config.blockchain.path.dev, 'static-nodes.json'), staticNodesString);
      }

      // Start the development chain
      const startArgs = [
        '--identity', options.identity || config.blockchain.identity,
        '--datadir', options.datadir || config.blockchain.path.dev,
        '--port', options.port || config.blockchain.port,
        '--rpcaddr', options.rpchost || config.blockchain.rpcaddr,
        '--rpcport', options.rpcport || config.blockchain.rpcport,
        '--verbosity', options.verbosity || 3,
        '--rpccorsdomain', options.rpccorsdomain || '*',
        '--rpc',
        '--nodiscover',
        '--preload', path.join(__dirname, './../src/devchain/devchain.js'),
        'console',
      ];
      spawn('geth', startArgs, { stdio: 'inherit'});
    }
  });


program.parse(process.argv);
