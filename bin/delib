#!/usr/bin/env node
'use strict';
const program = require('commander');
const path = require('path');
const fs = require('fs-extra');
const pathExists = require('path-exists').sync;

const delib = require('./../index.js');
const Addresses = require('./../src/models/Addresses');
const config = require('./../src/config/config.js');

program
  .version('3.2.0');

/** Initializes DeLib by creating a configuration file and the contracts folder. */

program
  .command('init')
  .description('Create configuration file, genesis file, and necessary folders')
  .action(() => {
    const configPath = path.join(process.cwd(), 'delib.js');
    const contractsFolderPath = path.join(process.cwd(), 'contracts');
    const builtFolderPath = path.join(process.cwd(), 'built');
    const addressFolderPath = path.join(process.cwd(), 'addresses');

    if (!pathExists(configPath)) {
      const defaultConfig = fs.readFileSync(path.join(__dirname, '/../src/config/default.js'));
      fs.writeFileSync(configPath, defaultConfig);
      console.log('Created config file delib.js');
    } else {
      console.log('Already created delib.js');
    }

    if (!pathExists(contractsFolderPath)) {
      fs.mkdirSync(contractsFolderPath);
      console.log('Created contract folder');
    }

    if (!pathExists(builtFolderPath)) {
      fs.mkdirSync(builtFolderPath);
      console.log('Created built contracts folder');
    }

    if (!pathExists(addressFolderPath)) {
      fs.mkdirSync(addressFolderPath);
      console.log('Created contract addresses folder');
    }
  });

/** Build a Solidity contract from paths in delib configuration file. Default is './contracts/' */
program
  .command('build <file>')
  .description('Build a Solidity contract')
  .option('-h --rpchost <value>', 'RPC host')
  .option('-r --rpcport <port>', 'RPC port')
  .option('-c --ipchost <path>', 'Relative path to IPC host')
  .option('-o --contract <path>', 'Relative path to contracts folder')
  .option('-b --built <path>', 'Relative path to built contracts folder')
  .action((file, options) => {
    options.ipchost ? delib.eth.initIPC(options.ipchost) : delib.eth.init(options.rpchost, options.rpcport);
    options = optionActions(options);
    console.log('Contract path:', path.join(config.projectRoot, delib.eth.contracts.paths.contract, file + '.sol'));
    delib.eth.build(file)
      .then((contracts) => {
        console.log('Built path:', path.join(config.projectRoot, delib.eth.contracts.paths.built));
        console.log('Built contracts:', contracts.join(', '));
        delib.eth.closeIPC();
      })
      .catch(err => {
        console.log(err);
        delib.eth.closeIPC();
      });
  });

/** Deploy a Solidity contract from paths in delib configuration file. Default is './contracts/'. */
program
  .command('deploy <contractName> [args...]')
  .description('Deploy a built contract')
  .option('-i --account <index>', 'Account to use for transaction. Takes the account index')
  .option('-f --from <address>', 'From transaction option. Replaces --account')
  .option('-t --to <address>', 'To transaction option')
  .option('-v --value <ether>', 'Value transaction option in Ether. Converts the value to wei')
  .option('-g --gas <number>', 'Gas transaction option. Estimated if not given or set to 0')
  .option('-p --gasprice <number>', 'Gas price transaction option')
  .option('-n --nonce <number>', 'Nonce transaction option')
  .option('-h --rpchost <value>', 'RPC host')
  .option('-r --rpcport <port>', 'RPC port')
  .option('-c --ipchost <path>', 'Relative path to IPC host')
  .option('-b --built <path>', 'Relative path to built contracts folder')
  .option('-a --address <path>', 'Relative path to addresses folder')
  .action((contractName, args, options) => {
    options.ipchost ? delib.eth.initIPC(options.ipchost) : delib.eth.init(options.rpchost, options.rpcport);
    options = optionActions(options);
    console.log('Built path:', path.join(config.projectRoot, delib.eth.contracts.paths.built, contractName + '.sol.js'));
    delib.eth.deploy(contractName, args)
      .then(instance => {
        console.log('Address path:', path.join(config.projectRoot, delib.eth.contracts.paths.address));
        console.log('Deployed contract address:', instance.address);
        delib.eth.closeIPC();
      })
      .catch(err => {
        console.error(err);
        delib.eth.closeIPC();
      });
  });

/** Executes a deployed contract with specified method and provided arguments. */
program
  .command('exec <contractName> <method> [args...]')
  .description('Execute a contract method')
  .option('-i --account <index>', 'Account to use for transaction. Takes the account index')
  .option('-f --from <address>', 'From transaction option. Replaces --account')
  .option('-t --to <address>', 'To transaction option.')
  .option('-v --value <ether>', 'Value transaction option in Ether. Converts the value to wei')
  .option('-g --gas <number>', 'Gas transaction option')
  .option('-p --gasprice <number>', 'Gas price transaction option')
  .option('-n --nonce <number>', 'Nonce transaction option')
  .option('-h --rpchost <value>', 'RPC host')
  .option('-r --rpcport <port>', 'RPC port')
  .option('-c --ipchost <path>', 'Relative path to IPC host')
  .option('-b --built <path>', 'Relative path to built contracts folder')
  .option('-a --address <path>', 'Relative path to addresses folder')
  .action((contractName, method, args, options) => {
    options.ipchost ? delib.eth.initIPC(options.ipchost) : delib.eth.init(options.rpchost, options.rpcport);
    options = optionActions(options);
    const contract = delib.eth.exec(contractName);
    contract[method].apply(this, args)
      .then(txRes => {
        console.log('Transaction response:', txRes);
        delib.eth.closeIPC();
      })
      .catch(err => {
        console.error(err);
        delib.eth.closeIPC();
      });
  });

/** Show the logs of a contract event. */
program
  .command('events <contractName> <eventName> [blocksBack]')
  .description('Get the logs of an event')
  .option('-h --rpchost <value>', 'RPC host')
  .option('-r --rpcport <port>', 'RPC port')
  .option('-c --ipchost <path>', 'Relative path to IPC host')
  .option('-b --built <path>', 'Relative path to built contracts folder')
  .option('-a --address <path>', 'Relative path to addresses folder')
  .action((contractName, eventName, blocksBack, options) => {
    options.ipchost ? delib.eth.initIPC(options.ipchost) : delib.eth.init(options.rpchost, options.rpcport);
    options = optionActions(options);
    delib.eth.events(contractName, eventName, blocksBack)
      .then(logs => {
        console.log('Event logs:');
        console.log(logs);
        delib.eth.closeIPC();
      })
      .catch(err => {
        console.error(err);
        delib.eth.closeIPC();
      });
  });

/** Set the address of a contract to call methods on */
program
  .command('set <contractName> <contractAddress>')
  .option('-a --address <path>', 'Relative path to addresses folder')
  .description('Set the address of a contract to use')
  .action((contractName, contractAddress, options) => {
    options = optionActions(options);
    delib.eth.contracts.addresses.set(contractName, contractAddress);
  });

/** Get the balance of a particular Ethereum account based on account index. */
program
  .command('balance <index>')
  .description('Get the balance of an Ethereum account by its index')
  .option('-h --rpchost <value>', 'RPC host')
  .option('-r --rpcport <port>', 'RPC port')
  .option('-c --ipchost <path>', 'Relative path to IPC host')
  .action((index, options) => {
    options.ipchost ? delib.eth.initIPC(options.ipchost) : delib.eth.init(options.rpchost, options.rpcport);
    const balance = delib.eth.getBalanceEther(index);
    console.log(balance);
    delib.eth.closeIPC();
  });

/** Create a new Ethereum account. */
program
  .command('create <password>')
  .description('Create an Ethereum account')
  .option('-c --ipchost <path>', 'Relative path to IPC host')
  .action((password, options) => {
    delib.eth.initIPC(options.ipchost);
    options.ipchost  = options.ipchost ? path.join(process.cwd(), options.ipchost, 'geth.ipc') : undefined;
    delib.eth.createAccount(password)
      .then(res => {
        console.log(res);
        delib.eth.closeIPC();
      })
      .catch(err => {
        console.error(err);
        delib.eth.closeIPC();
      });
  });

/** Unlocks an Ethereum account. */
program
  .command('unlock <index> <password> [time]')
  .description('Unlock an Ethereum account')
  .option('-c --ipchost <path>', 'Relative path to IPC host')
  .action((index, password, time, options) => {
    delib.eth.initIPC(options.ipchost);
    options.ipchost  = options.ipchost ? path.join(process.cwd(), options.ipchost, 'geth.ipc') : undefined;
    time = time || 60 * 60 * 24;
    delib.eth.unlockAccount(index, password, time)
      .then(bool => {
        delib.eth.closeIPC();
      })
      .catch(err => {
        console.error(err);
        delib.eth.closeIPC();
      });
  });

program.parse(process.argv);

/** Performs adjustments based on the options */
function optionActions(options) {
  options = Object.assign(config.cli.options, options);

  delib.eth.account = options.account || delib.eth.account;

  /** Transaction option adjustments */
  const deOptions = delib.eth.options;
  deOptions.from = options.from || deOptions.from;
  deOptions.to = options.to || deOptions.to;
  deOptions.value = options.value ? Number(delib.eth.web3.toWei(options.value, 'ether').toString()) : deOptions.value; // Converts Ether to wei
  // deOptions.value = options.value ? options.value : deOptions.value;
  deOptions.gas = options.gas || deOptions.gas;
  deOptions.gasPrice = options.gasPrice || deOptions.gasPrice;
  deOptions.data = options.data || deOptions.data;
  deOptions.nonce = options.nonce || deOptions.nonce;
  console.log(deOptions);

  /** Path adjustments */
  const dePaths = delib.eth.contracts.paths;
  dePaths.contract = options.contract || dePaths.contract;
  dePaths.built = options.built || dePaths.built;
  delib.eth.contracts.paths.address = options.address || delib.eth.contracts.paths.address;

  return options;
}
