#!/usr/bin/env node
'use strict';
const program = require('commander');
const path = require('path');
const fs = require('fs-extra');
const pathExists = require('path-exists').sync;
const spawn = require('child_process').spawn;
const spawnSync = require('child_process').spawnSync;

const Ethereum = require('./../src/ethereum/ethereum.js');
const Contracts = require('./../src/models/Contracts.js');
const config = require('./../src/config/config.js');

program
  .version('0.2.1');

/**
 * Initializes DeLib by creating a configuration file and the contracts folder.
 */
program
  .command('init')
  .action(() => {
    const configPath = path.join(process.cwd(), 'delib.js');
    const contractsFolderPath = path.join(process.cwd(), 'contracts');
    const builtFolderPath = path.join(process.cwd(), 'built');
    const addressFolderPath = path.join(process.cwd(), 'addresses');
    const devChainFolderPath = path.join(process.cwd(), 'devchain');

    // const genesisPath = path.join(process.cwd(), 'devgenesis.json')
    if (!pathExists(configPath)) {
      const defaultConfig = fs.readFileSync(path.join(__dirname, '/../src/config/default.js'));
      fs.writeFileSync(configPath, defaultConfig);
      console.log('Created configuration file delib.js');
    } else {
      console.log('DeLib config already initalized');
    }

    if (!pathExists(contractsFolderPath)) {
      fs.mkdirSync(contractsFolderPath);
      console.log('Created contract folder');
    } else {
      console.log('Contracts folder already created');
    }

    if (!pathExists(builtFolderPath)) {
      fs.mkdirSync(builtFolderPath);
      console.log('Created built contracts folder');
    } else {
      console.log('Build contracts folder already created');
    }

    if (!pathExists(addressFolderPath)) {
      fs.mkdirSync(addressFolderPath);
      console.log('Created contract addresses folder');
    } else {
      console.log('Contract addresses folder already created');
    }

    if (!pathExists(devChainFolderPath)) {
      fs.mkdirSync(devChainFolderPath);
      console.log('Created devchain folder');
    } else {
      console.log('Devchain folder already created');
    }

  });

/**
 * Build a Solidity contract from paths in delib configuration file. Default is './contracts/'
 */
program
  .command('build <file>')
  .action((file) => {
    Ethereum.buildContracts(file);
  });

/**
 * Deploy a Solidity contract from paths in delib configuration file. Default is './contracts/'.
 */
program
  .command('deploy <contractName> [args...]')
  .action((contractName, args) => {
    Ethereum.init();
    Ethereum.options = config.cli.options;
    Ethereum.deploy(contractName, args)
      .then(instance => {
        console.log('Deployed address:', instance.address);
        Contracts.set(contractName, instance.address);
      })
      .catch(err => {
        console.error(err);
      });
  });

/**
 * Set the address of a particular contract when called with exec.
 */
program
  .command('set <contractName> <contractAddress>')
  .action((contractName, contractAddress) => {
    Contracts.set(contractName, contractAddress);
  });

/**
 * Executes a deployed contract with specified method and provided arguments.
 */
program
  .command('exec <contractName> <method> [args...]')
  .action((contractName, method, args) => {
    Ethereum.init();
    Ethereum.options = config.cli.options;
    const contractAddress = Contracts.get(contractName);
    const contract = Ethereum.execAt(contractName, contractAddress);
    // args.push(Ethereum.options);

    contract[method].apply(this, args)
      .then(txRes => {
        console.log('Transaction response:', txRes);
      })
      .catch(err => {
        console.error(err);
      });
  });

/**
 * Show all the logs of a contract event.
 */
program
  .command('events <contractName> <eventName> <fromBlock>')
  .action((contractName, eventName, fromBlock) => {
    Ethereum.init();
    Ethereum.events(contractName, eventName, fromBlock)
      .then(logs => {
        console.log('Event logs:');
        console.log(logs);
      })
      .catch(err => {
        console.error(err);
      });
  });

/**
 * Get the balance of a particular Ethereum account based on account index.
 */
program
  .command('balance <index>')
  .action((index) => {
    Ethereum.init();
    const balance = Ethereum.getBalanceEther(index);
    console.log(balance);
  });

/**
 * Create a new Ethereum account.
 */
program
  .command('create <password>')
  .action(password => {
    Ethereum.init();
    Ethereum.createAccount(password)
      .then(res => {
        console.log(res);
        process.exit();
      })
      .catch(err => {
        console.error(err);
        process.exit();
      });
  });

/**
 * Unlocks an Ethereum account.
 */
program
  .command('unlock <index> <password> <time>')
  .action((index, password, time) => {
    Ethereum.init();
    Ethereum.unlockAccount(Ethereum.accounts[index], password, time)
      .then(bool => {
        process.exit();
      })
      .catch(err => {
        console.error(err);
        process.exit();
      });
  });

program
  .command('devchain')
  .action(args => {
    const blockChainPath = path.join(config.blockchain.path.dev, 'chaindata');
    if (pathExists(blockChainPath)) {
      fs.removeSync(blockChainPath);
    }
    // console.log(path.join(__dirname, '../', 'genesis.json'));
    // console.log(config.blockchain.path.dev);
    const initArgs = [
      '--datadir', config.blockchain.path.dev,
      'init', path.join(__dirname, '../', 'genesis.json')
    ];
    spawnSync('geth', initArgs, { stdio: 'inherit' });

    const startArgs = [
      '-identity', 'delib',
      '--datadir', config.blockchain.path.dev,
      '--rpc',
      '--nodiscover',
      '--verbosity', 3,
      '--preload', path.join(__dirname, './../src/devserver/startCmds.js'),
      'console',
    ];

    spawn('geth', startArgs, { stdio: 'inherit'});
  });

program.parse(process.argv);
